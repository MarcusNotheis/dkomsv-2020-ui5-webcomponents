{"version":3,"sources":["detail/storeFront.jpg","detail/index.jsx","home/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","StoreDetail","renderHeader","useCallback","Form","FormItem","labelText","masterdata","address","storeManager","revenue","style","height","width","ObjectPage","title","storeName","subTitle","storeType","renderHeaderContent","image","Avatar","storeFront","shape","AvatarShape","Square","display","ObjectPageSection","id","FlexBox","direction","FlexBoxDirection","Column","Title","level","TitleLevel","H3","LineChart","datasets","visitorChartData","labels","BarChart","productsChartData","AnalyticalTable","columns","Header","accessor","data","products","Home","App","ThemeProvider","withToastContainer","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wzDAAAA,EAAOC,QAAU,IAA0B,wC,oVCuE5BC,EAlDK,WAElB,IAAMC,EAAeC,uBAAY,WAE/B,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,UAAU,WAAWC,EAAWC,SAC1C,kBAACH,EAAA,EAAD,CAAUC,UAAU,iBAAiBC,EAAWE,cAChD,kBAACJ,EAAA,EAAD,CAAUC,UAAU,WAAWC,EAAWG,YAG7C,IAEH,OACE,yBAAKC,MAAO,CAAEC,OAAQ,QAASC,MAAO,UACpC,kBAACC,EAAA,EAAD,CAAYC,MAAOR,EAAWS,UAClBC,SAAUV,EAAWW,UACrBC,oBAAqBjB,EACrBkB,MAAO,kBAACC,EAAA,EAAD,CAAQD,MAAOE,IAAYC,MAAOC,IAAYC,OAAQd,MAAO,CAAEe,QAAS,kBACzF,kBAACC,EAAA,EAAD,CAAmBC,GAAG,kBAAkBb,MAAM,mBAC5C,kBAACc,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAASC,UAAWC,IAAiBC,OAAQnB,MAAM,OACjD,kBAACoB,EAAA,EAAD,CAAOC,MAAOC,IAAWC,IAAzB,0BACA,kBAACC,EAAA,EAAD,CAAWC,SAAUC,EACV1B,MAAO,OACP2B,OAAQ,CAAC,MAAO,MAAO,OAAQ,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,UAE7G,kBAACX,EAAA,EAAD,CAASC,UAAWC,IAAiBC,OAAQnB,MAAM,OACjD,kBAACoB,EAAA,EAAD,CAAOC,MAAOC,IAAWC,IAAzB,kBACA,kBAACK,EAAA,EAAD,CAAUH,SAAUI,EACV7B,MAAO,OACP2B,OAAQ,CAAC,gBAAiB,eAAgB,kBAAmB,gBAAiB,wBAO9F,kBAACb,EAAA,EAAD,CAAmBC,GAAG,mBAAmBb,MAAM,oBAC7C,kBAAC4B,EAAA,EAAD,CAAiBC,QAAS,CAAC,CAAEC,OAAQ,OAAQC,SAAU,QAAU,CAAED,OAAQ,QAASC,SAAU,SAAW,CACvGD,OAAQ,WACRC,SAAU,WACT,CAAED,OAAQ,eAAgBC,SAAU,YAAcC,KAAMC,QCxDtDC,G,OAJF,WACX,OAAO,6CCaMC,MAXf,WACE,OACE,kBAACC,EAAA,EAAD,CAAeC,oBAAkB,GAC/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,mBAAmBC,UAAWtD,OCCpCuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.56f0c708.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/storeFront.acb65a9e.jpg\";","import {\n  AnalyticalTable,\n  Avatar,\n  AvatarShape,\n  FlexBox,\n  FlexBoxDirection,\n  Form,\n  FormItem,\n  ObjectPage,\n  ObjectPageSection,\n  Title,\n  TitleLevel\n} from \"@ui5/webcomponents-react\";\nimport { BarChart, LineChart } from \"@ui5/webcomponents-react-charts\";\nimport React, { useCallback } from \"react\";\nimport productsChartData from './chartDataProducts';\nimport visitorChartData from './chartDataVisitors';\nimport products from './products';\nimport storeFront from './storeFront.jpg'\nimport masterdata from './storeMasterData'\n\nconst StoreDetail = () => {\n\n  const renderHeader = useCallback(() => {\n\n    return (\n      <Form>\n        <FormItem labelText=\"Address\">{masterdata.address}</FormItem>\n        <FormItem labelText=\"Store Manager\">{masterdata.storeManager}</FormItem>\n        <FormItem labelText=\"Revenue\">{masterdata.revenue}</FormItem>\n      </Form>\n    );\n  }, []);\n\n  return (\n    <div style={{ height: '100vh', width: '100vw' }}>\n      <ObjectPage title={masterdata.storeName}\n                  subTitle={masterdata.storeType}\n                  renderHeaderContent={renderHeader}\n                  image={<Avatar image={storeFront} shape={AvatarShape.Square} style={{ display: 'inline-flex' }}/>}>\n        <ObjectPageSection id=\"store-analytics\" title=\"Store Analytics\">\n          <FlexBox>\n            <FlexBox direction={FlexBoxDirection.Column} width=\"50%\">\n              <Title level={TitleLevel.H3}>Avg. Visitors per Hour</Title>\n              <LineChart datasets={visitorChartData}\n                         width={\"100%\"}\n                         labels={['8AM', '9AM', '10AM', '11AM', '12AM', '1PM', '2PM', '3PM', '4PM', '5PM', '6PM', '7PM', '8PM']}/>\n            </FlexBox>\n            <FlexBox direction={FlexBoxDirection.Column} width=\"50%\">\n              <Title level={TitleLevel.H3}>Top 5 Products</Title>\n              <BarChart datasets={productsChartData}\n                        width={\"100%\"}\n                        labels={['Super Desktop', 'Smart Mobile', 'Crystal Display', 'Power Charger', 'Hacker Keyboard']}/>\n            </FlexBox>\n\n\n          </FlexBox>\n\n        </ObjectPageSection>\n        <ObjectPageSection id=\"product-overview\" title=\"Product Overview\">\n          <AnalyticalTable columns={[{ Header: 'Name', accessor: 'name' }, { Header: 'Price', accessor: 'price' }, {\n            Header: 'In Stock',\n            accessor: 'inStock'\n          }, { Header: 'Manufacturer', accessor: 'company' }]} data={products}/>\n        </ObjectPageSection>\n      </ObjectPage>\n    </div>\n  )\n\n};\n\nexport default StoreDetail;\n","import React from 'react';\nimport '@ui5/webcomponents/dist/Label';\n\nconst Home = () => {\n  return <ui5-label>Home</ui5-label>\n};\n\nexport default Home;\n","import { ThemeProvider } from '@ui5/webcomponents-react/lib/ThemeProvider';\nimport React from 'react';\nimport { HashRouter, Route } from 'react-router-dom'\nimport StoreDetail from \"./detail\";\nimport Home from \"./home\";\n\nfunction App() {\n  return (\n    <ThemeProvider withToastContainer>\n      <HashRouter>\n        <Route exact path=\"/\" component={Home}/>\n        <Route exact path=\"/stores/:storeId\" component={StoreDetail}/>\n      </HashRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}